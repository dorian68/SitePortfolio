{"version":3,"sources":["logo.svg","images/A.jpg","images/B.jpeg","images/mini1.jpg","images/img1.jpg","images/img2.jpg","images/img3.jpg","Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Projects","Home","About","App","className","href","target","rel","Navbar","bg","variant","fluid","Brand","alt","src","logo","width","height","Nav","Link","activeKey","basename","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,4ICK5B,SAASC,IACpB,OACI,iC,qGC2CR,IAAMC,EAAO,kBAAM,6BAAK,sCAClBC,EAAQ,kBAAM,6BAAK,uCACVC,EArCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,WAAWC,KAAK,sBAAsBC,OAAO,SAAQC,IAAI,yBAExE,8BAEA,kBAACC,EAAA,EAAD,CAAQJ,UAAU,SAASK,GAAG,OAAOC,QAAQ,OAAOC,OAAK,GACnD,kBAACH,EAAA,EAAOI,MAAR,CAAcP,KAAK,SACjB,yBACEQ,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPb,UAAU,6BACP,IAPP,YASE,kBAACc,EAAA,EAAD,CAAKd,UAAU,WACb,kBAACc,EAAA,EAAIC,KAAL,CAAUd,KAAK,QAAQe,UAAU,uBAAjC,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUd,KAAK,UAAf,SACA,kBAACa,EAAA,EAAIC,KAAL,CAAUd,KAAK,aAAf,cAGV,kBAAC,IAAD,CAAYgB,SAAS,KACnB,kBAAC,IAAD,CAAOC,KAAK,QAAQC,OAAK,EAACC,UAAWvB,IACrC,kBAAC,IAAD,CAAOqB,KAAK,SAASC,OAAK,EAACC,UAAWtB,IACtC,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,OAAK,EAACC,UAAWxB,QC9B7ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48e1a60b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/A.a6aa64cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/B.cbde587b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mini1.8e14a5d7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img1.fe3deca6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img2.adc6432e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img3.c9f28e3e.jpg\";","import React from 'react'\r\nimport ProjectsList from './ProjectList'\r\nimport { Carousel,Container,Row,Col,Jumbotron,Button } from 'react-bootstrap';\r\n\r\n\r\nexport default function Projects() {\r\n    return (\r\n        <a>aa</a>\r\n    )}\r\n    \r\n","import React from 'react';\nimport logo from './logo.svg';\nimport img1 from './images/img1.jpg';\nimport img2 from './images/img2.jpg';\nimport img3 from './images/img3.jpg';\nimport Projects from './Projects';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Slide from './Slide';\nimport CardList from './CardList';\nimport { Navbar,Nav} from 'react-bootstrap';\nimport { BrowserRouter as Router,HashRouter, Route, Switch} from \"react-router-dom\";\nimport { Carousel,Container,Row,Col,Jumbotron,Button } from 'react-bootstrap';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">    \n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\"rel=\"noopener noreferrer\"/>\n      </header>\n      <body>\n      \n      <Navbar className=\"NavBar\" bg=\"dark\" variant=\"dark\" fluid>\n            <Navbar.Brand href=\"/Home\">\n              <img\n                alt=\"\"\n                src={logo}\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n                />{' '}\n                Dorian L</Navbar.Brand>\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/Home\" activeKey=\"{location.pathname}\">Home</Nav.Link>\n                <Nav.Link href=\"/About\">About</Nav.Link>\n                <Nav.Link href=\"/Projects\">Projects</Nav.Link>\n              </Nav>\n          </Navbar>\n      <HashRouter basename='/'>\n        <Route path=\"/Home\" exact component={Home} />\n        <Route path=\"/About\" exact component={About} />\n        <Route path=\"/Projects\" exact component={Projects} />\n      </HashRouter>\n\n    </body>\n    </div>\n  );\n}\n\nconst Home = () => <div><h2>Home</h2></div>\nconst About = () => <div><h2>About</h2></div>\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}